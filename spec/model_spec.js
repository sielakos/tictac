// Generated by CoffeeScript 1.7.1
(function() {
  describe('TicTacToeGameModel', function() {
    beforeEach(function() {
      return this.model = new TicTacToeGameModel(20);
    });
    it('stage has correct size', function() {
      var i, _i, _results;
      expect(this.model.stage.length).toBe(20);
      _results = [];
      for (i = _i = 0; _i <= 19; i = ++_i) {
        _results.push(expect(this.model.stage[i].length).toBe(20));
      }
      return _results;
    });
    it('isMoveAllowed checks if tile is within stage bounds and tile is free', function() {
      expect(this.model.isMoveAllowed(1, 2)).toBe(true);
      expect(this.model.isMoveAllowed(-1, 2)).toBe(false);
      expect(this.model.isMoveAllowed(40, 2)).toBe(false);
      expect(this.model.isMoveAllowed(4, 26)).toBe(false);
      expect(this.model.isMoveAllowed(1, 4)).toBe(true);
      this.model.stage[1][4] = 1;
      return expect(this.model.isMoveAllowed(1, 4)).toBe(false);
    });
    it('setField sets current player in given tile', function() {
      this.model.setField(1, 2);
      expect(this.model.stage[1][2]).toBe(0);
      this.model.setField(1, 3);
      return expect(this.model.stage[1][3]).toBe(1);
    });
    it('setFields sets last move', function() {
      this.model.setField(1, 2);
      expect(this.model.lastMove.x).toBe(1);
      expect(this.model.lastMove.y).toBe(2);
      this.model.setField(1, 4);
      expect(this.model.lastMove.x).toBe(1);
      return expect(this.model.lastMove.y).toBe(4);
    });
    it('setFields changes player', function() {
      var player;
      player = this.model.firstPlayer;
      this.model.setField(1, 2);
      expect(this.model.firstPlayer).not.toBe(player);
      this.model.setField(1, 2);
      return expect(this.model.firstPlayer).toBe(player);
    });
    it('getDirection works correctly', function() {
      var fields;
      this.model.stage[10][10] = 1;
      this.model.stage[10][11] = 0;
      fields = this.model.getDirection(10, 9, 0, 1);
      expect(fields).toEqual([-1, 1, 0, -1, -1]);
      fields = this.model.getDirection(10, 12, 0, -1);
      expect(fields).toEqual([-1, 0, 1, -1, -1]);
      fields = this.model.getDirection(9, 10, 1, 0);
      expect(fields).toEqual([-1, 1, -1, -1, -1]);
      fields = this.model.getDirection(11, 10, -1, 0);
      expect(fields).toEqual([-1, 1, -1, -1, -1]);
      fields = this.model.getDirection(9, 9, 1, 1);
      expect(fields).toEqual([-1, 1, -1, -1, -1]);
      fields = this.model.getDirection(11, 11, -1, -1);
      expect(fields).toEqual([-1, 1, -1, -1, -1]);
      fields = this.model.getDirection(11, 9, -1, 1);
      expect(fields).toEqual([-1, 1, -1, -1, -1]);
      fields = this.model.getDirection(9, 11, 1, -1);
      return expect(fields).toEqual([-1, 1, -1, -1, -1]);
    });
    return it('getDirection does not go outside stage bounds', function() {
      var fields;
      fields = this.model.getDirection(18, 18, 1, 1);
      expect(fields.length).toBeLessThan(5);
      expect(fields.length).toBe(2);
      fields = this.model.getDirection(25, 18, 1, 1);
      return expect(fields.length).toBe(0);
    });
  });

}).call(this);
