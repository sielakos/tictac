// Generated by CoffeeScript 1.7.1
(function() {
  var TicTacToeGameModel,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  TicTacToeGameModel = (function() {
    function TicTacToeGameModel(mapSize) {
      this.mapSize = mapSize != null ? mapSize : 20;
      this.clone = __bind(this.clone, this);
      this.restart = __bind(this.restart, this);
      this.restart();
    }

    TicTacToeGameModel.prototype.isMoveAllowed = function(tileX, tileY) {
      return (this.isWithinStageBounds(tileX, tileY)) && this.stage[tileX][tileY] === -1;
    };

    TicTacToeGameModel.prototype.isWithinStageBounds = function(tileX, tileY) {
      return tileX >= 0 && tileY >= 0 && tileX < this.mapSize && tileY < this.mapSize;
    };

    TicTacToeGameModel.prototype.setField = function(tileX, tileY) {
      this.stage[tileX][tileY] = this.firstPlayer ? 0 : 1;
      this.firstPlayer = !this.firstPlayer;
      return this.lastMove = {
        x: tileX,
        y: tileY
      };
    };

    TicTacToeGameModel.prototype.getTileNumber = function() {
      if (this.firstPlayer) {
        return 0;
      } else {
        return 1;
      }
    };

    TicTacToeGameModel.prototype.didGameEnded = function() {
      var direction, directions, player, _i, _len;
      directions = this.getAllDirections();
      player = this.stage[this.lastMove.x][this.lastMove.y];
      if (player === -1) {
        player = 0;
      }
      for (_i = 0, _len = directions.length; _i < _len; _i++) {
        direction = directions[_i];
        if (this._checkDirection(direction, player)) {
          this.gameInProgress = false;
          return {
            finished: true,
            player: player
          };
        }
      }
      return {
        finished: false,
        player: player
      };
    };

    TicTacToeGameModel.prototype._checkDirection = function(direction, player) {
      var field, ok, _i, _len;
      ok = true;
      for (_i = 0, _len = direction.length; _i < _len; _i++) {
        field = direction[_i];
        ok = ok && field === player;
      }
      return ok;
    };

    TicTacToeGameModel.prototype.getAllDirections = function() {
      var changer, dirChangers, _i, _len, _results;
      dirChangers = this.createDirectionChangers();
      _results = [];
      for (_i = 0, _len = dirChangers.length; _i < _len; _i++) {
        changer = dirChangers[_i];
        _results.push(this.getDirection(this.lastMove.x, this.lastMove.y, changer[0], changer[1]));
      }
      return _results;
    };

    TicTacToeGameModel.prototype.createDirectionChangers = function() {
      var changers, i, j, _i, _j;
      changers = [];
      for (i = _i = -1; _i <= 1; i = ++_i) {
        for (j = _j = -1; _j <= 1; j = ++_j) {
          if (i !== 0 || j !== 0) {
            changers.push([i, j]);
          }
        }
      }
      return changers;
    };

    TicTacToeGameModel.prototype.getDirection = function(x, y, dirX, dirY) {
      var fields, i, _i;
      fields = [];
      for (i = _i = 0; _i <= 4; i = ++_i) {
        if (this.isWithinStageBounds(x, y)) {
          fields.push(this.stage[x][y]);
        }
        x += dirX;
        y += dirY;
      }
      return fields;
    };

    TicTacToeGameModel.prototype.restart = function() {
      var i, j;
      this.stage = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.mapSize - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (j = _j = 0, _ref1 = this.mapSize - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              _results1.push(-1);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      this.firstPlayer = true;
      this.lastMove = {
        x: 0,
        y: 0
      };
      return this.gameInProgress = true;
    };

    TicTacToeGameModel.prototype.clone = function() {
      var el, other, row;
      other = TicTacToeGameModel(this.mapSize);
      other.stage = (function() {
        var _i, _len, _ref, _results;
        _ref = this.stage;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
              el = row[_j];
              _results1.push(el);
            }
            return _results1;
          })());
        }
        return _results;
      }).call(this);
      other.firstPlayer = this.firstPlayer;
      other.lastMove = this.lastMove;
      other.gameInProgress = this.gameInProgress;
      return other;
    };

    return TicTacToeGameModel;

  })();

  this.TicTacToeGameModel = TicTacToeGameModel;

}).call(this);
