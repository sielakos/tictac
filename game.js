// Generated by CoffeeScript 1.7.1
(function() {
  var TicTacGame, game,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  TicTacGame = (function() {
    function TicTacGame(game) {
      this.game = game;
      this.update = __bind(this.update, this);
      this.restart = __bind(this.restart, this);
      this.setGameField = __bind(this.setGameField, this);
      this.onMove = __bind(this.onMove, this);
      this.createLines = __bind(this.createLines, this);
      this.createRestartCallback = __bind(this.createRestartCallback, this);
      this.createPlayers = __bind(this.createPlayers, this);
      this.create = __bind(this.create, this);
      this.preload = __bind(this.preload, this);
      this.removeCallback = __bind(this.removeCallback, this);
      this.addClickCallback = __bind(this.addClickCallback, this);
      this.ticTacModel = new TicTacToeGameModel(20);
      this.clickCallbacks = [];
    }

    TicTacGame.prototype.addClickCallback = function(callback) {
      this.clickCallbacks.push(callback);
      return callback.clickCallbackId = Math.random();
    };

    TicTacGame.prototype.removeCallback = function(callback) {
      var element, newCallbacks, _i, _len, _ref;
      newCallbacks = [];
      _ref = this.clickCallbacks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        if (element.clickCallbackId !== callback.clickCallbackId) {
          newCallbacks.push(element);
        }
      }
      return this.clickCallbacks = newCallbacks;
    };

    TicTacGame.prototype.preload = function() {
      return this.game.load.image('tiles', 'tiles.png');
    };

    TicTacGame.prototype.create = function() {
      var style;
      this.createPlayers();
      this.createRestartCallback();
      this.game.stage.backgroundColor = "#2d2d2d";
      this.createLines();
      this.map = this.game.add.tilemap();
      this.map.addTilesetImage('tiles');
      this.layer = this.map.create('level', this.ticTacModel.mapSize, this.ticTacModel.mapSize, 32, 32);
      this.layer.resizeWorld();
      this.game.input.setMoveCallback(this.onMove, this);
      this.cursors = this.game.input.keyboard.createCursorKeys();
      this.marker = this.game.add.graphics();
      this.marker.lineStyle(2, 0x000000, 1);
      this.marker.drawRect(0, 0, 32, 32);
      this.pointerMoved = false;
      this.game.camera.x = 25;
      this.game.camera.y = 25;
      style = {
        font: "35pt Arial",
        fill: "#b0ffb0",
        align: "center"
      };
      this.endText = game.add.text(this.game.world.centerX - 200, this.game.world.centerY - 50, '', style);
      return this.endText.visible = false;
    };

    TicTacGame.prototype.createPlayers = function() {
      this.playerManager = new PlayerManager(this.ticTacModel);
      this.playerManager.firstPlayer = new HumanPlayer(this);
      return this.playerManager.secondPlayer = new HumanPlayer(this);
    };

    TicTacGame.prototype.createRestartCallback = function() {
      var active;
      active = false;
      return this.addClickCallback((function(_this) {
        return function() {
          if (!active && !_this.ticTacModel.gameInProgress) {
            return active = true;
          } else if (active) {
            _this.restart();
            return active = false;
          }
        };
      })(this));
    };

    TicTacGame.prototype.createLines = function() {
      var i, _i, _j, _ref, _ref1, _results;
      this.lines = this.game.add.graphics();
      this.lines.lineStyle(1, 0x00ff00, 1);
      for (i = _i = 1, _ref = this.ticTacModel.mapSize; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        this.lines.moveTo(0, i * 32);
        this.lines.lineTo(this.ticTacModel.mapSize * 32, i * 32);
      }
      _results = [];
      for (i = _j = 1, _ref1 = this.ticTacModel.mapSize; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
        this.lines.moveTo(i * 32, 0);
        _results.push(this.lines.lineTo(i * 32, this.ticTacModel.mapSize * 32));
      }
      return _results;
    };

    TicTacGame.prototype.onMove = function() {
      var callback, _i, _len, _ref, _results;
      this.updateMarker();
      if (this.game.input.mousePointer.isDown) {
        _ref = this.clickCallbacks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          callback = _ref[_i];
          _results.push(callback());
        }
        return _results;
      }
    };

    TicTacGame.prototype.updateMarker = function() {
      this.pointerMoved = true;
      this.marker.x = (this.layer.getTileX(this.game.input.activePointer.worldX)) * 32;
      return this.marker.y = (this.layer.getTileY(this.game.input.activePointer.worldY)) * 32;
    };

    TicTacGame.prototype.setGameField = function(tileX, tileY) {
      var finished, player, _ref;
      if (this.ticTacModel.isMoveAllowed(tileX, tileY)) {
        this.ticTacModel.setField(tileX, tileY);
        this.map.putTile(this.ticTacModel.getTileNumber(), tileX, tileY, this.layer);
        _ref = this.ticTacModel.didGameEnded(), finished = _ref.finished, player = _ref.player;
        if (finished) {
          return this.gameEnded(player);
        }
      }
    };

    TicTacGame.prototype.gameEnded = function(player) {
      this.endText.text = 'Game Over,\n';
      if (player === 0) {
        this.endText.text += 'first player';
      } else {
        this.endText.text += 'second player';
      }
      this.endText.text += ' won!';
      return this.endText.visible = true;
    };

    TicTacGame.prototype.restart = function() {
      this.ticTacModel.restart();
      this.map.fill(2, 0, 0, this.ticTacModel.mapSize, this.ticTacModel.mapSize, this.layer);
      return this.endText.visible = false;
    };

    TicTacGame.prototype.update = function() {
      var tileX, tileY;
      tileX = this.layer.getTileX(this.marker.x);
      tileY = this.layer.getTileY(this.marker.y);
      if (this.pointerMoved) {
        this.cursorIsNearEdgeAction(tileX, tileY);
      }
      if (this.ticTacModel.gameInProgress) {
        this.playerManager.askForMove(this.setGameField);
      }
      if (this.cursors.left.isDown) {
        return this.game.camera.x -= 4;
      } else if (this.cursors.right.isDown) {
        return this.game.camera.x += 4;
      } else if (this.cursors.up.isDown) {
        return this.game.camera.y -= 4;
      } else if (this.cursors.down.isDown) {
        return this.game.camera.y += 4;
      }
    };

    TicTacGame.prototype.cursorIsNearEdgeAction = function(tileX, tileY) {
      var endX, endY, startX, startY;
      startX = this.layer.getTileX(this.game.camera.x);
      startY = this.layer.getTileY(this.game.camera.y);
      endX = this.layer.getTileX(this.game.camera.x + this.game.camera.width);
      endY = this.layer.getTileY(this.game.camera.y + this.game.camera.height);
      if (tileX <= (startX + 2)) {
        this.game.camera.x -= 4;
      }
      if (tileX >= (endX - 2)) {
        this.game.camera.x += 4;
      }
      if (tileY <= (startY + 2)) {
        this.game.camera.y -= 4;
      }
      if (tileY >= (endY - 2)) {
        return this.game.camera.y += 4;
      }
    };

    return TicTacGame;

  })();

  game = new Phaser.Game(640, 640, Phaser.AUTO, 'phaser-target', new TicTacGame());

  this.game = game;

}).call(this);
